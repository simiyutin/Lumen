#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#define SCENE_TEX_IDX 9
#include "gris_commons.glsl"
GrisDirectLighting direct_lighting_buffer = GrisDirectLighting(scene_desc.gris_direct_lighting_addr);
PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);
layout(binding = 4, std430) readonly buffer PathReconnections { ReconnectionData reconnection_data[]; };
layout(binding = 5, std430) readonly buffer InReservoirs { Reservoir in_reservoirs[]; };
layout(binding = 6, std430) writeonly buffer OutReservoirs { Reservoir out_reservoirs[]; };
layout(binding = 7, std430) readonly buffer CurrGBuffer { GBuffer curr_gbuffers[]; };
layout(binding = 8, rgba16) uniform image2D canonical_contributions_tex;
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.general_seed);
uvec4 seed2 = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.seed2);

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer DebugVisBuffer { uint d[]; };
DebugVisBuffer debug_vis = DebugVisBuffer(scene_desc.debug_vis_addr);

// TODO: Maybe use an external buffer to supply spatial offsets?

vec3 do_spatial_reuse(GBuffer gbuffer, Reservoir reservoir) {
	HitData canonical_gbuffer =
		get_hitdata(gbuffer.barycentrics, gbuffer.primitive_instance_id.y, gbuffer.primitive_instance_id.x);
	Reservoir canonical_reservoir = in_reservoirs[pixel_idx];

	int num_spatial_samples = pc.enable_spatial_reuse == 1 ? int(pc.num_spatial_samples) : 0;
	vec3 curr_reservoir_contribution = vec3(0);

	float canonical_in_canonical_pdf = canonical_reservoir.data.reservoir_contribution;
	uint num_valid_samples = 0;
	float curr_new_partial_jacobian = 0;

	uvec4 neighbor_seed = seed2;

	uint accepted_positions[13];
	uint num_accepted_positions = 0;

	vec3 primary_direction = get_primary_direction(uvec2(gl_LaunchIDEXT.xy));
#ifdef ENABLE_DEFENSIVE_PAIRWISE_MIS
	float m_c = 1.0;
#else
	float m_c = 0;
#endif	// ENABLE_DEFENSIVE_PAIRWISE_MIS
	for (int i = 0; i < num_spatial_samples; i++) {
		ivec2 rand_offset = get_neighbor_offset(neighbor_seed);
		const ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy) + rand_offset;
		if (any(lessThan(neighbor_coords, ivec2(0))) || any(greaterThanEqual(neighbor_coords, gl_LaunchSizeEXT.xy))) {
			continue;
		}
		const uint neighbor_pixel_idx = neighbor_coords.x * pc.size_y + neighbor_coords.y;
		GBuffer neighbor_gbuffer = curr_gbuffers[neighbor_pixel_idx];
		if (!gbuffer_data_valid(neighbor_gbuffer)) {
			continue;
		}
		num_valid_samples++;
		Reservoir neighbor_reservoir = in_reservoirs[neighbor_pixel_idx];
#if 1
		ReconnectionData data = reconnection_data[(num_spatial_samples + 1) * pixel_idx + i + 1];
#else
		uvec2 seed_helpers = uvec2(pc.general_seed, pc.sampling_seed);
		ReconnectionData data;
		data.reservoir_contribution = vec3(0);
		data.jacobian = 0;
		data.target_pdf_in_neighbor = 0;
		HitData unpacked_neighbor_gbuffer =
			get_hitdata(neighbor_gbuffer.barycentrics, neighbor_gbuffer.primitive_instance_id.y,
						neighbor_gbuffer.primitive_instance_id.x);
		vec3 primary_direction = get_primary_direction(uvec2(gl_LaunchIDEXT.xy));
		retrace_paths(canonical_gbuffer, neighbor_reservoir.data, primary_direction, uvec2(neighbor_coords),
					  neighbor_reservoir.data.rc_partial_jacobian, data.jacobian, data.reservoir_contribution,
					  data.new_jacobian);
		primary_direction = get_primary_direction(uvec2(neighbor_coords.xy));
		retrace_paths_and_evaluate(unpacked_neighbor_gbuffer, canonical_reservoir.data, primary_direction,
								   gl_LaunchIDEXT.xy, data.target_pdf_in_neighbor);
#endif
		bool accepted =
			process_reservoir(seed, reservoir, m_c, canonical_reservoir, neighbor_reservoir, data, neighbor_coords,
							  canonical_in_canonical_pdf, pc.num_spatial_samples, curr_reservoir_contribution);
		if (accepted) {
			curr_new_partial_jacobian = data.new_jacobian;
			accepted_positions[num_accepted_positions++] = neighbor_pixel_idx;
		}
	}

#ifndef ENABLE_DEFENSIVE_PAIRWISE_MIS
	if (num_valid_samples == 0) {
		m_c = 1;
	}
#endif	// ENABLE_DEFENSIVE_PAIRWISE_MIS

	bool accepted = combine_reservoir(seed, reservoir, canonical_reservoir,
									  canonical_reservoir.data.reservoir_contribution, m_c, 1.0);
	if (accepted) {
		curr_reservoir_contribution = imageLoad(canonical_contributions_tex, ivec2(gl_LaunchIDEXT.xy)).xyz;
		curr_new_partial_jacobian = canonical_reservoir.data.rc_partial_jacobian;
	} else {
		imageStore(canonical_contributions_tex, ivec2(gl_LaunchIDEXT.xy), vec4(curr_reservoir_contribution, 0));
	}

	calc_reservoir_W_with_mis(reservoir);
#ifdef ENABLE_DEFENSIVE_PAIRWISE_MIS
	reservoir.W /= (1.0 + num_valid_samples);
#else
	reservoir.W /= max(num_valid_samples, 1);
#endif	// ENABLE_DEFENSIVE_PAIRWISE_MIS

	reservoir.data.reservoir_contribution = calc_target_pdf(curr_reservoir_contribution);
	reservoir.data.rc_partial_jacobian = curr_new_partial_jacobian;
	out_reservoirs[pixel_idx] = reservoir;

	vec3 final_contribution = vec3(0);
	if (pc.show_reconnection_radiance == 1) {
		final_contribution = vec3(0);
	} else {
		final_contribution = prefix_contributions.d[pixel_idx];
	}
	if (reservoir.W > 0) {
		final_contribution += curr_reservoir_contribution * reservoir.W;
	}

	float uv_x = float(gl_LaunchIDEXT.x) / float(gl_LaunchSizeEXT.x);

	vec3 col = vec3(0);
	if (pc.direct_lighting == 1) {
		col += direct_lighting_buffer.d[pixel_idx];
	}

	col += final_contribution;

	if (pc.pixel_debug == 1 && ubo.clicked_pos == ivec2(gl_LaunchIDEXT.xy)) {
		uint linear_idx = gl_LaunchIDEXT.x * pc.size_y + gl_LaunchIDEXT.y;
		debug_vis.d[linear_idx] = 1;
		for (uint i = 0; i < num_accepted_positions; i++) {
			debug_vis.d[accepted_positions[i]] = 1;
		}
	}
	return col;
}

void main() {
	float uv_x = float(gl_LaunchIDEXT.x) / float(gl_LaunchSizeEXT.x);
	if (uv_x >= pc.gris_separator) {
		return;
	}
	GBuffer gbuffer = curr_gbuffers[pixel_idx];
	Reservoir reservoir;
	init_reservoir(reservoir);
	vec3 col;
	if (!gbuffer_data_valid(gbuffer)) {
		out_reservoirs[pixel_idx] = reservoir;
		col = direct_lighting_buffer.d[pixel_idx];
	} else {
		col = do_spatial_reuse(gbuffer, reservoir);
	}
	ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy);
	if (pc.enable_accumulation == 0 || pc.frame_num == 0) {
		imageStore(image, ivec2(neighbor_coords), vec4(col, 1.f));
	} else {
		float w = 1. / float(pc.frame_num + 1);
		vec3 old_col = imageLoad(image, ivec2(neighbor_coords)).xyz;
		imageStore(image, ivec2(neighbor_coords), vec4(mix(old_col, col, w), 1.f));
	}
}