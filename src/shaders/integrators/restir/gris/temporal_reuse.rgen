#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#define SCENE_TEX_IDX 9
#include "gris_commons.glsl"
PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);
layout(binding = 4, std430) buffer OutReservoirs { Reservoir curr_reservoirs[]; };
layout(binding = 5, std430) readonly buffer InReservoirs { Reservoir prev_reservoirs[]; };
layout(binding = 6, std430) readonly buffer CurrGBuffer { GBuffer curr_gbuffers[]; };
layout(binding = 7, std430) readonly buffer PrevGBuffer { GBuffer prev_gbuffers[]; };
layout(binding = 8, rgba16) uniform image2D canonical_contributions_tex;
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.seed3);

ivec2 get_permuted_coords(inout uvec4 seed, ivec2 coords) {
	uvec2 rands = uvec2(floatBitsToUint(rand(seed)), floatBitsToUint(rand(seed)));
	ivec2 offset = ivec2(rands.x & 3, (rands.y >> 2) & 3);
	ivec2 new_coords = coords + offset;
	new_coords ^= ivec2(3);
	new_coords -= offset;
	return new_coords;
}

void main() {
	Reservoir reservoir;
	init_reservoir(reservoir);
	GBuffer gbuffer = curr_gbuffers[pixel_idx];
	if (!gbuffer_data_valid(gbuffer)) {
		return;
	}
	Reservoir canonical_reservoir = curr_reservoirs[pixel_idx];

	HitData canonical_gbuffer =
		get_hitdata(gbuffer.barycentrics, gbuffer.primitive_instance_id.y, gbuffer.primitive_instance_id.x);
	vec4 prev_pos = ubo.prev_view * vec4(canonical_gbuffer.pos, 1);
	prev_pos /= prev_pos.z;
	prev_pos = -ubo.prev_projection * prev_pos;
	vec2 jitter =  pc.enable_temporal_jitter == 1 ? rand2(seed) - 0.5 : vec2(0);
	ivec2 prev_coords = ivec2(0.5 * (1 + prev_pos.xy) * gl_LaunchSizeEXT.xy + jitter);

	if (pc.permutation_sampling == 1) {
		prev_coords = get_permuted_coords(seed, prev_coords);
	}

	float m_c = 0;
	float canonical_in_canonical_pdf = canonical_reservoir.data.reservoir_contribution;
	vec3 curr_reservoir_contribution = vec3(0);
	bool prev_accepted = false;
	float new_jacobian;

	if (!(any(lessThan(prev_coords, ivec2(0))) || any(greaterThanEqual(prev_coords, gl_LaunchSizeEXT.xy)))) {
		const uint prev_idx = prev_coords.x * pc.size_y + prev_coords.y;
		GBuffer prev_gbuffer = prev_gbuffers[prev_idx];
		if (gbuffer_data_valid(prev_gbuffer)) {
			ReconnectionData data;
			data.reservoir_contribution = vec3(0);
			data.jacobian = 0;
			data.target_pdf_in_neighbor = 0;

			const Reservoir prev_reservoir = prev_reservoirs[prev_idx];
			HitData prev_hitdata = get_hitdata(prev_gbuffer.barycentrics, prev_gbuffer.primitive_instance_id.y,
											   prev_gbuffer.primitive_instance_id.x);

			vec3 primary_direction = get_primary_direction(uvec2(gl_LaunchIDEXT.xy));
			vec3 prev_primary_direction = get_prev_primary_direction(uvec2(prev_coords));
			retrace_paths(canonical_gbuffer, prev_reservoir.data, primary_direction,
						  prev_reservoir.data.rc_partial_jacobian, data.jacobian, data.reservoir_contribution,
						  new_jacobian);

			retrace_paths_and_evaluate(prev_hitdata, canonical_reservoir.data, prev_primary_direction,
									   data.target_pdf_in_neighbor);

			prev_accepted = process_reservoir(seed, reservoir, m_c, canonical_reservoir, prev_reservoir, data,
											  prev_coords, canonical_in_canonical_pdf, 1, curr_reservoir_contribution);
		}
	}

	// Stream in the canonical reservoir
	m_c = m_c == 0 ? 1.0 : m_c;
	bool canonical = combine_reservoir(seed, reservoir, canonical_reservoir, canonical_in_canonical_pdf, m_c, 1.0);
	if (canonical) {
		curr_reservoir_contribution = imageLoad(canonical_contributions_tex, ivec2(gl_LaunchIDEXT.xy)).xyz;
	} else {
		imageStore(canonical_contributions_tex, ivec2(gl_LaunchIDEXT.xy), vec4(curr_reservoir_contribution, 0));
	}
	float target_pdf = calc_target_pdf(curr_reservoir_contribution);
	calc_reservoir_W_with_mis(reservoir);

	if (prev_accepted && !canonical) {
		reservoir.data.rc_partial_jacobian = new_jacobian;
		reservoir.data.reservoir_contribution = calc_target_pdf(curr_reservoir_contribution);
	}

	curr_reservoirs[pixel_idx] = reservoir;
}