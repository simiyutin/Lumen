#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#define SCENE_TEX_IDX 9
#include "gris_commons.glsl"
PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);
layout(binding = 4, std430) readonly buffer InReservoirs { Reservoir in_reservoirs[]; };
layout(binding = 5, std430) writeonly buffer OutReservoirs { Reservoir out_reservoirs[]; };
layout(binding = 6, std430) readonly buffer CurrGBuffer { GBuffer curr_gbuffers[]; };
layout(binding = 7, rgba16) uniform image2D canonical_contributions_tex;
layout(binding = 8, rgba32f) uniform image2D direct_lighting_img;
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.total_frame_num);

#define MAX_SPATIAL_SAMPLES 12

void main() {
	GBuffer gbuffer = curr_gbuffers[pixel_idx];
	if (!gbuffer_data_valid(gbuffer)) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0));
		return;
	}
	HitData canonical_gbuffer =
		get_hitdata(gbuffer.barycentrics, gbuffer.primitive_instance_id.y, gbuffer.primitive_instance_id.x);

	Reservoir reservoir;
	init_reservoir(reservoir);

	Reservoir canonical_reservoir = in_reservoirs[pixel_idx];

	int num_spatial_samples = pc.enable_spatial_reuse == 1 ? int(pc.num_spatial_samples) : 0;
	vec3 curr_reservoir_contribution = vec3(0);

	uint seed_helper = pc.general_seed;
	ivec2 offsets[MAX_SPATIAL_SAMPLES];
	for (int i = 0; i < MAX_SPATIAL_SAMPLES; i++) {
		ivec2 offset = get_neighbor_offset(seed);
		offsets[i++] = offset;
	}
	float mis_weight_sum = 0;
	float curr_new_partial_jacobian = 0;
	for (int i = -1; i < num_spatial_samples; i++) {
		ivec2 rand_offset = i == -1 ? ivec2(0) : offsets[i];
		const ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy) + rand_offset;
		if (any(lessThan(neighbor_coords, ivec2(0))) || any(greaterThanEqual(neighbor_coords, gl_LaunchSizeEXT.xy))) {
			continue;
		}
		const uint neighbor_pixel_idx = neighbor_coords.x * pc.size_y + neighbor_coords.y;
		GBuffer neighbor_gbuffer = curr_gbuffers[neighbor_pixel_idx];
		if (!gbuffer_data_valid(neighbor_gbuffer)) {
			continue;
		}

		HitData unpacked_neighbor_gbuffer =
			get_hitdata(neighbor_gbuffer.barycentrics, neighbor_gbuffer.primitive_instance_id.y,
						neighbor_gbuffer.primitive_instance_id.x);
		bool valid_reservoir = false;
		const Reservoir neighbor_reservoir = in_reservoirs[neighbor_pixel_idx];
		float jacobian = 0;
		float new_jacobian = 0;
		vec3 reservoir_contribution = vec3(0);
		float p_sum = 0;
		float p_curr = 0;
		if (i == -1) {
			valid_reservoir = neighbor_reservoir.W > 0;
			jacobian = 1.0;
			new_jacobian = neighbor_reservoir.data.rc_partial_jacobian;
			reservoir_contribution = imageLoad(canonical_contributions_tex, ivec2(neighbor_coords.xy)).xyz;
		} else {
			vec3 primary_direction = get_primary_direction(uvec2(gl_LaunchIDEXT.xy));
			valid_reservoir = retrace_paths(canonical_gbuffer, neighbor_reservoir.data, primary_direction,
											neighbor_reservoir.data.rc_partial_jacobian, jacobian,
											reservoir_contribution, new_jacobian);
		}

		float reservoir_pdf = calc_target_pdf(reservoir_contribution) * jacobian;
		if (reservoir_pdf * neighbor_reservoir.W > 0.0) {
			for (int j = -1; j < num_spatial_samples; j++) {
				if (j == -1) {
					float p = calc_target_pdf(reservoir_contribution) * canonical_reservoir.M;
					p_sum += p;
					if (i == -1) {
						p_curr = p;
					}
				} else {
					if (i == j) {
						vec3 neighor_contrib = imageLoad(canonical_contributions_tex, ivec2(neighbor_coords.xy)).xyz;
						p_curr = jacobian == 0 ? 0
											   : calc_target_pdf(neighor_contrib) *
													 float(neighbor_reservoir.M) / jacobian;
						p_sum += p_curr;
						continue;
					}
					const ivec2 validation_coords = ivec2(gl_LaunchIDEXT.xy) + offsets[j];
					if (any(lessThan(validation_coords, ivec2(0))) ||
						any(greaterThanEqual(validation_coords, gl_LaunchSizeEXT.xy))) {
						continue;
					}
					const uint validation_pixel_idx = validation_coords.x * pc.size_y + validation_coords.y;
					GBuffer validation_gbuffer = curr_gbuffers[validation_pixel_idx];
					if (!gbuffer_data_valid(validation_gbuffer)) {
						continue;
					}
					const Reservoir validation_reservoir = in_reservoirs[validation_pixel_idx];
					HitData unpacked_validation_gbuffer =
						get_hitdata(validation_gbuffer.barycentrics, validation_gbuffer.primitive_instance_id.y,
									validation_gbuffer.primitive_instance_id.x);
					float target_pdf_in_neighbor = 0;
					vec3 primary_direction = get_primary_direction(uvec2(validation_coords.xy));
					bool valid = retrace_paths_and_evaluate(unpacked_validation_gbuffer, neighbor_reservoir.data,
															primary_direction, new_jacobian, target_pdf_in_neighbor);
					p_sum += target_pdf_in_neighbor * validation_reservoir.M;
				}
			}
		}
		float mis_weight = p_sum <= 0.0 ? 0.0 : p_curr / p_sum;
		mis_weight_sum += mis_weight;
		bool accepted = combine_reservoir(seed, reservoir, neighbor_reservoir, calc_target_pdf(reservoir_contribution),
										  mis_weight, jacobian);
		if (accepted) {
			curr_reservoir_contribution = reservoir_contribution;
			curr_new_partial_jacobian = new_jacobian;
		}
	}
	calc_reservoir_W_with_mis(reservoir);

	reservoir.data.reservoir_contribution = calc_target_pdf(curr_reservoir_contribution);
	reservoir.data.rc_partial_jacobian = curr_new_partial_jacobian;
	// LOG_CLICKED("%d\n", reservoir.M);
	out_reservoirs[pixel_idx] = reservoir;

	vec3 final_contribution = vec3(0);
	if (pc.hide_reconnection_radiance == 1) {
		final_contribution = vec3(0);
	} else {
		final_contribution = prefix_contributions.d[pixel_idx];
	}
	if (reservoir.W > 0) {
		final_contribution += curr_reservoir_contribution * reservoir.W;
	}

	float uv_x = float(gl_LaunchIDEXT.x) / float(gl_LaunchSizeEXT.x);
	if (uv_x >= pc.gris_separator) {
		return;
	}

	vec3 col = vec3(0);
	if (pc.direct_lighting == 1) {
		col += imageLoad(direct_lighting_img, ivec2(gl_LaunchIDEXT.xy)).xyz;
	}

	col += final_contribution;

	ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy);
	if (pc.enable_accumulation == 0 || pc.frame_num == 0) {
		imageStore(image, ivec2(neighbor_coords), vec4(col, 1.f));
	} else {
		float w = 1. / float(pc.frame_num + 1);
		vec3 old_col = imageLoad(image, ivec2(neighbor_coords)).xyz;
		imageStore(image, ivec2(neighbor_coords), vec4(mix(old_col, col, w), 1.f));
	}
}